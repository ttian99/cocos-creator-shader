// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        #灰化程度
        grayLevel: {
          value: 1.0,
          editor: {
            tooltip: "灰化程度",
            range: [0.0, 1.0]
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  // 如果使用灰化
  #if USE_GRAY
  uniform Gray {
    float grayLevel;
  };
  /**
  * 获取灰色
    计算公式:
    float gray = 0.2126 * r + 0.7152 * g + 0.0722 * b;
  */
  vec4 getGrayColor(vec4 color) {
    float gray = 0.2126*color.r + 0.7152*color.g + 0.0722*color.b;
    return vec4(gray, gray, gray, color.a);
  }
  #endif
  
  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    #if USE_GRAY
      vec4 srcColor = o;
      vec4 grayColor = getGrayColor(o);
      o = srcColor + (grayColor - srcColor) * grayLevel;
      // o = grayColor;
    #endif

    gl_FragColor = o;
  }
}%
