// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

/**
  内发光
  
  1.原理: 采样周边像素alpha取平均值，叠加发光效果
  2.采样方案：
    (1)按圆采样: 圆的半径radius, 角度angle
    (2)矩形偏远采样:
  3.确定参数：
    采样个数 --->  采集多少个圆 ---> 发光宽度
*/
CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        #发光颜色
        glowColor: {
          value: [1.0, 1.0, 0.0, 1.0], 
          editor: {
            type: color,
            tooltip: '发光颜色'
          }
        }
        #发光宽度
        glowColorSize: {
          value: 0.1,
          editor: {
            tooltip: '发光宽度'
          }
        }
        #发光阈值 
        glowThreshold: {
          value: 0.1,
          editor: {
            tooltip: '发光阈值'
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #if USE_GLOW_INNER
  // 特别地，必须是 vec4 先于 float 声明
  uniform GlowInfo {
    vec4 glowColor;
    float glowColorSize;
    float glowThreshold;
  };

  vec4 getTextureColor(sampler2D texture, vec2 v_uv0) {
    if (v_uv0.x > 1.0 || v_uv0.x < 0.0 || v_uv0.y > 1.0 || v_uv0.y < 0.0) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    }
    return texture(texture, v_uv0);
  }
  /**
    获取指定角度方向，距离为xxx的像素的透明度
    @param angle 角度
    @param dist 半径:目标点的距离
  */
  float getColorAlpha(float angle, float dist) {
    // 获取弧度
    float rad = radians(angle);
    // 获取坐标
    float x = dist * cos(rad);
    float y = dist * sin(rad);
    vec4 color = getTextureColor(texture, v_uv0 + vec2(x, y));
    return color.a;
  }
  /**
   * 获取指定距离的周边像素的透明度平均值
   * @param dist 距离 [0.0, 1.0]
   * @return average alpha [0.0, 1.0]
   */
  float getAverageAlpha(float dist) {
    float totalAlpha = 0.0;
    // 以30度为一个单位，那么「周边一圈」就由0到360度中共计12个点的组成
    totalAlpha += getColorAlpha(0.0, dist);
    totalAlpha += getColorAlpha(30.0, dist);
    totalAlpha += getColorAlpha(60.0, dist);
    totalAlpha += getColorAlpha(90.0, dist);
    totalAlpha += getColorAlpha(120.0, dist);
    totalAlpha += getColorAlpha(150.0, dist);
    totalAlpha += getColorAlpha(180.0, dist);
    totalAlpha += getColorAlpha(210.0, dist);
    totalAlpha += getColorAlpha(240.0, dist);
    totalAlpha += getColorAlpha(270.0, dist);
    totalAlpha += getColorAlpha(300.0, dist);
    totalAlpha += getColorAlpha(330.0, dist);
    return totalAlpha * 0.0833; // 1 / 12 = 0.08333
  }
  /**
   * 获取发光的透明度
   */
  float getGlowAlpha() {
    // 如果发光宽度为0，直接返回0.0透明度，减少计算量
    if (glowColorSize == 0.0) {
      return 0.0;
    }
    // 因为我们是要做内发光，所以如果点本来是透明的或者接近透明的
    // 那么就意味着这个点是图像外的透明点或者图像内透明点（如空洞）之类的
    // 内发光的话，这些透明点我们不用处理，让它保持原样，否则就是会有内描边或者一点扩边的效果
    // 同时也是提前直接结束，减少计算量
    vec4 srcColor = getTextureColor(texture, v_uv0);
    if (srcColor.a <= glowThreshold) {
      return srcColor.a;
    }
    // 将传入的指定距离，平均分成10圈，求出每一圈的平均透明度，
    // 然后求和取平均值，那么就可以得到该点的平均透明度
    float totalAlpha = 0.0;
    totalAlpha += getAverageAlpha(glowColorSize * 0.1);
    totalAlpha += getAverageAlpha(glowColorSize * 0.2);
    totalAlpha += getAverageAlpha(glowColorSize * 0.3);
    totalAlpha += getAverageAlpha(glowColorSize * 0.4);
    totalAlpha += getAverageAlpha(glowColorSize * 0.5);
    totalAlpha += getAverageAlpha(glowColorSize * 0.6);
    totalAlpha += getAverageAlpha(glowColorSize * 0.7);
    totalAlpha += getAverageAlpha(glowColorSize * 0.8);
    totalAlpha += getAverageAlpha(glowColorSize * 0.9);
    totalAlpha += getAverageAlpha(glowColorSize * 1.0);
    return totalAlpha * 0.1;
  }
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);
    
    gl_FragColor = o;

    #if USE_GLOW_INNER
    float alpha = getGlowAlpha();
    if (alpha > glowThreshold) {
      // 内发光是从边缘发光的，是需要内部透明度为0，靠近边缘的接近1的透明度
      // 因此我们需要反转一下透明度
      alpha = 1.0 - alpha;

      // 给点调料，让靠近边缘的更加亮
      alpha = -1.0 * pow((alpha - 1.0), 4.0) + 1.0;
    }

    // 在原图像上叠加内发光特效
    // 叠加方案:
    // (内发光) color_src: GL_ONE
    // (原图像) color_dest: GL_SRC_ALPHA 
    // 即最终颜色如下：
    // color_src * GL_SRC_ALPHA + color_dest * GL_ONE
    vec4 color_dest = o;
    vec4 color_src = glowColor * alpha;
    
    gl_FragColor = color_src * color_src.a + color_dest;

    #endif
  }
}%
